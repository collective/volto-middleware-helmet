import helmet from "helmet";
import CryptoJS from "crypto-js";

/*
 * This addon adds the helmet middleware to the Volto application.
 * Helmet helps you secure your Express apps by setting various HTTP headers.
 * It's not a silver bullet, but it can help!
 * 
 * The headers are divided into DEVELOPMENT and DEFAULT profiles.
 * The DEVELOPMENT profile is used when the application is started in development mode.
 * The DEFAULT profile is used when the application is started after being built.
 * 
 * In the following code, various models are defined for each header.
 * The models are completly customizable, but the notice that the ones provided were tested (and commented).
 * 
 * In the CSP header, scripts are verified using a nonce, the nonce is generated through an express function that is executed by the expressJs Volto Middleware every time the page is loaded.
 * This ensures that only the scripts that are generated by the server are executed ('self' or by nonce).
 * The nonce is added to the default inline scripts through the custom volto helper in src/customizations/volto/helpers/Html/Html.jsx.
 * 
 * The possible headers in both profiles are:
 * - Content-Security-Policy (CSP)
 *   - CSP Directives
 *   - CSP Report
 * - Cross-Origin-Resource-Policy (CORP)
 * - Cross-Origin-Opener-Policy (COOP)
 * - Cross-Origin-Embedder-Policy (COEP)
 */

/************************************** Content-Security-Policy **************************************/

// Generate a nonce for the CSP, see https://cryptojs.gitbook.io/docs/ for docs
const createNonce = (req, res) => {
  res.locals.nonce = CryptoJS.lib.WordArray.random(128 / 8).toString();
  return `'nonce-${res.locals.nonce}'`;
};

// Define the CSP models
const CSPHelmetModels = {
  none: false,
  light: {
    'default-src': ["*", "http:", "https:", "'unsafe-inline'"],
    'script-src': ["'self'", createNonce],
    'style-src': ["*", "http:", "https:", "'unsafe-inline'", "'unsafe-hashes'"],
    'img-src': ["*", "data:", "blob:", "http:", "https:"],
    'font-src': ["*", "data:", "http:", "https:"],
  },
  medium: {
    'default-src': ["'self'"],
    'script-src': ["'self'", createNonce],
    // Since Volto adds inline styles at runtime, we need to allow 'unsafe-inline'
    'style-src': ["'self'", "data:", "blob:", 'https:', "'unsafe-inline'"],
    'img-src': ["'self'", 'data:', 'blob:', 'https:'],
    'font-src': ["'self'", 'data:', 'https:'],
    'connect-src': ["'self'", "https:"],
    'frame-src': ["'self'", "https:"],
    'base-uri': ["'self'", "https:"],
    'form-action': ["'self'", "https:"],
    'frame-ancestors': ["'none'", "https:"],
    'manifest-src': ["'self'", "https:"],
    'worker-src': ["'self'", "https:"],
  },
  strict: {
    'default-src': ["'self'"],
    // For added security, consider adding 'strict-dynamic' here (WARNING: often breaks websites)
    // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src#strict-dynamic for details
    'script-src': ["'self'", createNonce],
    // Since Volto adds inline styles at runtime, we need to allow 'unsafe-inline'
    'style-src': ["'self'", "'unsafe-inline'"],
    'img-src': ["'self'"],
    'connect-src': ["'self'"],
    'frame-src': ["'self'"],
    'base-uri': ["'self'"],
    'form-action': ["'self'"],
    'frame-ancestors': ["'none'"],
    'manifest-src': ["'self'"],
    'worker-src': ["'self'"],
  }
};

const CSPReportModels = {
  none: false,
  reportOnly: {
    reportOnly: true,
  },
  reportUri: {
    reportUri: "/csp-reports",
  },
  reportOnlyUri: {
    reportOnly: true,
    reportUri: "/csp-reports",
  }
};

/************************************** Cross-Origin-Resource-Policy **************************************/
const CORPHelmetModels = {
  none: false,
  sameSite: {
    policy: "same-site",
  },
  sameOrigin: {
    policy: "same-origin",
  },
  crossOrigin: {
    policy: "cross-origin",
  }
};

/************************************** Cross-Origin-Opener-Policy **************************************/
const COOPHelmetModels = {
  none: false,
  sameOrigin: {
    policy: "same-origin",
  },
  sameOriginAllowPopups: {
    policy: "same-origin-allow-popups",
  },
  unsafeNone: {
    policy: "unsafe-none",
  }
};

/************************************** Cross-Origin-Embedder-Policy **************************************/
const COEPHelmetModels = {
  none: false,
  requireCorp: {
    policy: "require-corp",
  },
  unsafeNone: {
    policy: "unsafe-none",
  },
  credentialless: {
    policy: "credentialless",
  }
};

/************************************** Apply the helmet settings **************************************/
const helmetSpecifiedProfiles = {
  // In default, the CSP is set to medium and the report is set to reportUri
  default: {
    contentSecurityPolicy: { directives: CSPHelmetModels.medium, ...CSPReportModels.reportUri },
    crossOriginResourcePolicy: CORPHelmetModels.sameSite,
    crossOriginOpenerPolicy: COOPHelmetModels.sameOrigin,
    crossOriginEmbedderPolicy: COEPHelmetModels.requireCorp,
  },
  // In development, the CSP is set to light and the report is set to reportOnly
  development: {
    hsts: false,
    contentSecurityPolicy: { directives: CSPHelmetModels.light, ...CSPReportModels.reportOnly },
    crossOriginResourcePolicy: CORPHelmetModels.none,
    crossOriginOpenerPolicy: COOPHelmetModels.none,
    crossOriginEmbedderPolicy: COEPHelmetModels.none,
  },
};

const applyConfig = (config) => {
  // Get the helmet settings from the environment variable or set the default one
  const helmetSettings = process.env.HELMET_PROFILE || (__DEVELOPMENT__ ? "development" : "default");
  // Add the helmet settings to the config
  config.settings = {
      ...config.settings,
      helmetSettings,
  };

  // Enable helmet middleware only when server side rendering is executed
  if (__SERVER__) {
    // Get the helmet settings from the helmetSpecifiedProfiles object
    const finalHelmetSettings = helmetSpecifiedProfiles[helmetSettings] || helmetSettings;

    // Add the nonce to the config file so that it can be used in the template
    const setToConfig = (req, res, next) => {
      config.settings.cspNonce = res.locals.nonce;
      next();
    };

    // If in development, add to every directive the 'http://localhost:3001' origin
    if (__DEVELOPMENT__) {
      Object.keys(finalHelmetSettings.contentSecurityPolicy.directives).forEach((directive) => {
        finalHelmetSettings.contentSecurityPolicy.directives[directive].push("http://localhost:3001");
      });
    }

    // Define the middleware by adding the helmet settings to the helmet function
    const middleware = helmet(finalHelmetSettings);
    middleware.id = "helmet-middleware";

    // Add the middleware to the config with the setToConfig function (to get the nonce)
    config.settings.expressMiddleware.push(middleware);
    config.settings.expressMiddleware.push(setToConfig);
  }

  return config;
};

export default applyConfig;
